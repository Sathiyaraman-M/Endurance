
<MudNavMenu>
    <MudNavLink Href="/administration/dashboard" Match="NavLinkMatch.All">Dashboard</MudNavLink>
    <MudNavLink Href="/swagger/index.html">Swagger</MudNavLink>
</MudNavMenu>
<MudDivider />
<MudText Class="ml-4 my-2" Typo="Typo.overline">MASTERS</MudText>
<MudNavMenu>
    @if (canViewBooks)
    {
        <MudNavLink Href="/administration/books">Books</MudNavLink>
    }
    @if (canViewPatrons)
    {
        <MudNavLink Href="/administration/patrons">Patrons</MudNavLink>
    }
</MudNavMenu>
<MudDivider />
<MudText Class="ml-4 my-2" Typo="Typo.overline">TRANSACTIONS</MudText>
<MudNavMenu>
    @if (canViewCheckouts)
    {
        <MudNavLink Href="/administration/checkouts">Checkouts</MudNavLink>
    }
    @if (canViewAuditTrails)
    {
        <MudNavLink Href="/administration/audit-trails">Audit Trails</MudNavLink>
    }
</MudNavMenu>
<MudDivider />
<MudText Class="ml-4 my-2" Typo="Typo.overline">IDENTITY</MudText>
<MudNavMenu>
    @if (canViewUsers)
    {
        <MudNavLink Href="/administration/identity/users">Users</MudNavLink>
    }
    @if (canViewRoles)
    {
        <MudNavLink Href="/administration/identity/roles">Roles</MudNavLink>
    }
</MudNavMenu>
<MudDivider />
<MudText Class="ml-4 my-2" Typo="Typo.overline">OTHER</MudText>
<MudNavMenu>
    @if (canViewSettings)
    {
        <MudNavLink Href="/administration/settings">Settings</MudNavLink>
    }
</MudNavMenu>

@code
{
    private ClaimsPrincipal User;
    private bool canViewAuditTrails;
    private bool canViewBooks;
    private bool canViewCheckouts;
    private bool canViewPatrons;
    private bool canViewUsers;
    private bool canViewRoles;
    private bool canViewSettings;

    protected override async Task OnInitializedAsync()
    {
        User = await authStateProvider.GetAuthenticationStateProviderUserAsync();
        canViewAuditTrails = (await authorizationService.AuthorizeAsync(User, Permissions.AuditTrails.View)).Succeeded;
        canViewBooks = (await authorizationService.AuthorizeAsync(User, Permissions.Books.View)).Succeeded;
        canViewPatrons = (await authorizationService.AuthorizeAsync(User, Permissions.Patrons.View)).Succeeded;
        canViewCheckouts = (await authorizationService.AuthorizeAsync(User, Permissions.Checkouts.View)).Succeeded;
        canViewUsers = (await authorizationService.AuthorizeAsync(User, Permissions.Users.View)).Succeeded;
        canViewRoles = (await authorizationService.AuthorizeAsync(User, Permissions.Roles.View)).Succeeded;
        canViewSettings = (await authorizationService.AuthorizeAsync(User, Permissions.Settings.View)).Succeeded;
    }
}