@page "/checkouts"
@attribute [Authorize(Policy = Permissions.Checkouts.View)]
@inject ICheckoutHttpClient _checkoutHttpClient

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Books</MudText>
<MudText Color="Color.Surface" Class="mb-4">Manage all books here</MudText>
<MudTable Elevation="0" Outlined Hover HorizontalScrollbar Dense ServerData="new Func<TableState, Task<TableData<CheckoutResponse>>>(OnServerReloadAsync)" @ref="mudTable" LoadingProgressColor="Color.Secondary">
    <NoRecordsContent>
        <MudAlert Severity="Severity.Normal">No checkouts done yet!</MudAlert>
    </NoRecordsContent>
    <LoadingContent>
        <MudText Typo="Typo.body1" Align="Align.Center" GutterBottom>Loading...</MudText>
    </LoadingContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width:10%" />
        <col style="width:10%" />
        <col style="width:10%" />
    </ColGroup>
    <ToolBarContent>
        <div class="justify-center mud-text-align-center">
            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => OnSearch(""))" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Class="me-2">Reload</MudButton>
        </div>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search for Books" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="CheckoutResponse" SortLabel="Id">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="CheckoutResponse" SortLabel="BookBarcode">Book Barcode</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="CheckoutResponse" SortLabel="BookName">Book Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="CheckoutResponse" SortLabel="PatronRegisterId">Patron ID</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="CheckoutResponse" SortLabel="PatronName">Patron Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="CheckoutResponse" SortLabel="CheckedOutSince">Checkout Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="CheckoutResponse" SortLabel="ExpectedCheckInDate">Expected Return Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="CheckoutResponse" SortLabel="CheckedOutUntil">Check In Date</MudTableSortLabel></MudTh>
        @if (_canView)
        {
            <MudTh Style="text-align:right">View</MudTh>
        }
        @if (_canDelete)
        {
            <MudTh Style="text-align:right">Delete</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Book Barcode">
            <MudHighlighter Text="@context.BookBarcode" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Book Name">
            <MudHighlighter Text="@context.BookName" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Patron ID">
            <MudHighlighter Text="@context.PatronRegisterId" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Patron Name">
            <MudHighlighter Text="@context.PatronName" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Checkout Date">
            <MudHighlighter Text="@context.CheckedOutSince.ToString("dd/MM/yyyy")" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Expected Return Date">
            <MudHighlighter Text="@context.ExpectedCheckInDate.ToString("dd/MM/yyyy")" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Check In Date">
            @if (context.CheckedOutUntil.HasValue)
            {
                <MudHighlighter Text="@context.CheckedOutUntil.Value.ToString("dd/MM/yyyy")" HighlightedText="@_searchString" />
            }
            else
            {
                <MudText Typo="Typo.body1" Color="Color.Warning">Yet to check in</MudText>
            }
        </MudTd>
        @if (_canView)
        {
            <MudTd DataLabel="View" Style="text-align:right">
                <MudFab DisableElevation Color="Color.Secondary" Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" />
            </MudTd>
        }
        @if (_canDelete)
        {
            <MudTd DataLabel="Delete" Style="text-align:right">
                <MudFab DisableElevation Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="(() => Delete(context.Id))" />
            </MudTd>
        }
    </RowTemplate>
</MudTable>

@code
{
    private List<CheckoutResponse> _checkouts { get; set; }
    private CheckoutResponse _checkout { get; set; }
    private string _searchString { get; set; }
    private MudTable<CheckoutResponse> mudTable { get; set; }
    private int _totalItems;
    private int _currentPage;

    private ClaimsPrincipal _currentUser;
    private bool _canCreate;
    private bool _canView;
    private bool _canEdit;
    private bool _canDelete;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await authenticationManager.CurrentUser();
        _canCreate = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Checkouts.Create)).Succeeded;
        _canView = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Checkouts.View)).Succeeded;
        _canEdit = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Checkouts.Edit)).Succeeded;
        _canDelete = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Checkouts.Delete)).Succeeded;
    }    

    private async Task<TableData<CheckoutResponse>> OnServerReloadAsync(TableState tableState)
    {
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            tableState.Page = 0;
        }
        await LoadDataAsync(tableState.Page, tableState.PageSize, tableState);
        return new TableData<CheckoutResponse> { TotalItems = _totalItems, Items = _checkouts };
    }

    private async Task LoadDataAsync(int page, int pageSize, TableState tableState)
    {
        string[] orderings = null;
        if (!string.IsNullOrEmpty(tableState.SortLabel))
        {
            orderings = tableState.SortDirection != SortDirection.None ? new[] { $"{tableState.SortLabel} {tableState.SortDirection}" } : new[] { $"{tableState.SortLabel}" };
        }
        var response = await _checkoutHttpClient.GetAllPaginatedAsync(new Core.Requests.PagedRequest
        {
            PageNumber = page + 1,
            PageSize = pageSize,
            SearchString = _searchString,
            OrderBy = orderings
        });
        if (response.Succeeded)
        {
            _totalItems = response.TotalCount;
            _currentPage = response.CurrentPage;
            _checkouts = response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
        }
    }

    private async Task Delete(int Id)
    {
        if ((await dialogService.ShowMessageBox("Confirm Delete?", "Are you sure want to delete this checkout?", yesText: "Delete", cancelText: "Cancel")) == true)
        {
            var response = await _checkoutHttpClient.DeleteCheckoutAsync(Id);
            if (response.Succeeded)
            {
                foreach (var message in response.Messages)
                {
                    snackbar.Add(message, Severity.Success);
                }
                OnSearch("");
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    snackbar.Add(message, Severity.Error);
                }
            }
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        mudTable.ReloadServerData();
    }
}