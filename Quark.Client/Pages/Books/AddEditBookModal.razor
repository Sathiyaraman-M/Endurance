@namespace Quark.Client.Pages.Modals
@inject IBookManager _bookManager

<EditForm Model="Model" OnValidSubmit="SaveAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <MudDialog>
        <TitleContent>
            @if (Model.Id == 0)
            {
                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />Add Book</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Update" Class="mr-3 mb-n1" />Edit Book</MudText>
            }
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.DeweyIndex)" @bind-Value="Model.DeweyIndex" Label="Dewey Index" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Name)" @bind-Value="Model.Name" Label="Name" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.ISBN)" @bind-Value="Model.ISBN" Label="ISBN" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T=string For=@(() => Model.Author) @bind-Value=Model.Author Label=Author />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Publisher)" @bind-Value="Model.Publisher" Label="Publisher" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Edition)" @bind-Value="Model.Edition" Label="Edition" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="int" For="(() => Model.PublicationYear)" @bind-Value="Model.PublicationYear" Label="Publication Year" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="decimal" For="(() => Model.Cost)" @bind-Value="Model.Cost" Label="Cost" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" For="(() => Model.Description)" @bind-Value="Model.Description" Label="Description" />
                </MudItem>
            </MudGrid>
            <MudTable Items=Model.Assets Context="asset" @bind-SelectedItem=selectedAsset CanCancelEdit=true RowEditPreview=BackupItem>
                <ToolBarContent>
                    <MudIconButton Icon=@Icons.Material.Filled.Add OnClick="(() => { Model.Assets.Add(new LibraryAssetResponse { Condition = AssetStatusConstants.GoodCondition, IsAvailable=true }); })" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Barcode</MudTh>
                    <MudTh>Condition</MudTh>
                    <MudTh>IsAvailable</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel=Barcode>@asset.Barcode</MudTd>
                    <MudTd DataLabel=Condition>@asset.Condition</MudTd>
                    <MudTd DataLabel=IsAvailable>@asset.IsAvailable</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel=Barcode>
                        <MudTextField @bind-Value=asset.Barcode Variant=Variant.Outlined Margin=Margin.Dense />
                    </MudTd>
                    <MudTd DataLabel=Condition>
                        <MudMenu Label=@asset.Condition Color=Color.Default Variant=Variant.Filled EndIcon=@Icons.Filled.KeyboardArrowDown IconColor=Color.Secondary Dense OffsetY Size=Size.Small>
                            <MudMenuItem OnClick="(() => asset.Condition = AssetStatusConstants.GoodCondition)">Good Condition</MudMenuItem>
                            <MudMenuItem OnClick="(() => asset.Condition = AssetStatusConstants.Unknown)">Unknown</MudMenuItem>
                            <MudMenuItem OnClick="(() => asset.Condition = AssetStatusConstants.Lost)">Lost</MudMenuItem>
                            <MudMenuItem OnClick="(() => asset.Condition = AssetStatusConstants.Destroyed)">Destroyed</MudMenuItem>
                        </MudMenu>
                    </MudTd>
                    <MudTd DataLabel=IsAvailable>
                        <MudCheckBox @bind-Checked=asset.IsAvailable></MudCheckBox>
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>
        </DialogContent>
        <DialogActions>
            <MudButton DisableElevation Variant="Variant.Filled" OnClick="(() => MudDialog.Close())">Cancel</MudButton>
            <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Secondary">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code
{
    [Parameter] public AddEditBookCommand Model { get; set; } = new();
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    private LibraryAssetResponse selectedAsset {  get;  set; }
    private LibraryAssetResponse beforeEditAsset {  get;  set; }

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });

    private void BackupItem(object asset)
    {
        
    }

    private async Task SaveAsync()
    {
        var response = await _bookManager.SaveAsync(Model);
        if (response.Succeeded)
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Success);
            }
            MudDialog.Close();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
        }
    }
}