@namespace Quark.Client.Pages.Modals
@inject IBookHttpClient _bookHttpClient

<EditForm Model="Model" OnValidSubmit="SaveAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <MudDialog>
        <TitleContent>
            @if (Model.Id == 0)
            {
                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />Add Book</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Update" Class="mr-3 mb-n1" />Edit Book</MudText>
            }
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Barcode)" @bind-Value="Model.Barcode" Label="Barcode Value" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Name)" @bind-Value="Model.Name" Label="Name" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.ISBN)" @bind-Value="Model.ISBN" Label="ISBN" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Author)" @bind-Value="Model.Author" Label="Author" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.DeweyIndex)" @bind-Value="Model.DeweyIndex" Label="Dewey Index" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Publisher)" @bind-Value="Model.Publisher" Label="Publisher" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Edition)" @bind-Value="Model.Edition" Label="Edition" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="int" For="(() => Model.PublicationYear)" @bind-Value="Model.PublicationYear" Label="Publication Year" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" For="(() => Model.Description)" @bind-Value="Model.Description" Label="Description" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="decimal" For="(() => Model.Cost)" @bind-Value="Model.Cost" Label="Cost" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton DisableElevation Variant="Variant.Filled" OnClick="(() => MudDialog.Close())">Cancel</MudButton>
            <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Secondary">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code
{
    [Parameter] public AddEditBookCommand Model { get; set; } = new();
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });

    private async Task SaveAsync()
    {
        var response = await _bookHttpClient.SaveAsync(Model);
        if (response.Succeeded)
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Success);
            }
            MudDialog.Close();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
        }
    }
}