@page "/books"
@attribute [Authorize(Policy = Permissions.Books.View)]
@inject IBookHttpClient _bookHttpClient

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Books</MudText>
<MudText Color="Color.Surface" Class="mb-4">Manage all books here</MudText>
<MudTable Elevation="0" Outlined Hover HorizontalScrollbar Dense ServerData="new Func<TableState, Task<TableData<BookResponse>>>(OnServerReloadAsync)" @ref="mudTable" LoadingProgressColor="Color.Secondary">
    <NoRecordsContent>
        <MudAlert Severity="Severity.Normal">No books in the library. Try to fill 'em up!</MudAlert>
    </NoRecordsContent>
    <LoadingContent>
        <MudText Typo="Typo.body1" Align="Align.Center" GutterBottom>Loading...</MudText>
    </LoadingContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width: 10%;" />
        <col style="width: 10%;" />
        <col style="width: 10%;" />
    </ColGroup>
    <ToolBarContent>
        <div class="justify-center mud-text-align-center">
            @if (_canCreate)
            {
                <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="me-2">Add</MudButton>
            }
            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => OnSearch(""))" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Class="me-2">Reload</MudButton>
        </div>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search for Books" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="BookResponse" SortLabel="Barcode">Barcode</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="BookResponse" SortLabel="DeweyIndex">Dewey Index</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="BookResponse" SortLabel="Name">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="BookResponse" SortLabel="ISBN">ISBN</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="BookResponse" SortLabel="Author">Author</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="BookResponse" SortLabel="Publisher">Publisher</MudTableSortLabel></MudTh>
        @if (_canView)
        {
            <MudTh Style="text-align:right">View</MudTh>
        }
        @if (_canEdit)
        {
            <MudTh Style="text-align:right">Edit</MudTh>
        }
        @if (_canDelete)
        {
            <MudTh Style="text-align:right">Delete</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Barcode">
            <MudHighlighter Text="@context.Barcode" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Dewey Index">
            <MudHighlighter Text="@context.DeweyIndex" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Name">
            <MudHighlighter Text="@context.Name" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="ISBN">
            <MudHighlighter Text="@context.ISBN" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Author">
            <MudHighlighter Text="@context.Author" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Publisher">
            <MudHighlighter Text="@context.Publisher" HighlightedText="@_searchString" />
        </MudTd>
        @if (_canView)
        {
            <MudTd DataLabel="View" Style="text-align:right">
                <MudFab DisableElevation Color="Color.Secondary" Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" OnClick="@(() => navigationManager.NavigateTo($"books/{context.Id}"))" />
            </MudTd>
        }
        @if (_canEdit)
        {
            <MudTd DataLabel="Edit" Style="text-align:right">
                <MudFab DisableElevation Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="(() => InvokeModal(context.Id))" />
            </MudTd>
        }
        @if (_canDelete)
        {
            <MudTd DataLabel="Delete" Style="text-align:right">
                <MudFab DisableElevation Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="(() => Delete(context.Id))" />
            </MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    private List<BookResponse> _books { get; set; }
    private BookResponse _book { get; set; }
    private string _searchString { get; set; }
    private MudTable<BookResponse> mudTable { get; set; }
    private int _totalItems;
    private int _currentPage;

    private ClaimsPrincipal _currentUser;
    private bool _canCreate;
    private bool _canView;
    private bool _canEdit;
    private bool _canDelete;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await authenticationHttpClient.CurrentUser();
        _canCreate = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Books.Create)).Succeeded;
        _canView = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Books.View)).Succeeded;
        _canEdit = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Books.Edit)).Succeeded;
        _canDelete = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Books.Delete)).Succeeded;
    }

    private async Task<TableData<BookResponse>> OnServerReloadAsync(TableState tableState)
    {
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            tableState.Page = 0;
        }
        await LoadDataAsync(tableState.Page, tableState.PageSize, tableState);
        return new TableData<BookResponse> { TotalItems = _totalItems, Items = _books };
    }

    private async Task LoadDataAsync(int page, int pageSize, TableState tableState)
    {
        string[] orderings = null;
        if (!string.IsNullOrEmpty(tableState.SortLabel))
        {
            orderings = tableState.SortDirection != SortDirection.None ? new[] { $"{tableState.SortLabel} {tableState.SortDirection}" } : new[] { $"{tableState.SortLabel}" };
        }
        var response = await _bookHttpClient.GetAllPaginatedAsync(new Core.Requests.PagedRequest
        {
            PageNumber = page + 1,
            PageSize = pageSize,
            SearchString = _searchString,
            OrderBy = orderings
        });
        if (response.Succeeded)
        {
            _totalItems = response.TotalCount;
            _currentPage = response.CurrentPage;
            _books = response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
        }
    }

    private async Task Delete(int Id)
    {
        if ((await dialogService.ShowMessageBox("Confirm Delete?", "Are you sure want to delete this book?", yesText: "Delete", cancelText: "Cancel")) == true)
        {
            var response = await _bookHttpClient.DeleteAsync(Id);
            if (response.Succeeded)
            {
                foreach (var message in response.Messages)
                {
                    snackbar.Add(message, Severity.Success);
                }
                OnSearch("");
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    snackbar.Add(message, Severity.Error);
                }
            }
        }
    }
    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            _book = _books.FirstOrDefault(c => c.Id == id);
            if (_book != null)
            {
                parameters.Add(nameof(AddEditBookModal.Model), new AddEditBookCommand
                {
                    Id = _book.Id,
                    Name = _book.Name,
                    ISBN = _book.ISBN,
                    Author = _book.Author,
                    DeweyIndex = _book.DeweyIndex,
                    Publisher = _book.Publisher,
                    Edition = _book.Edition,
                    PublicationYear = _book.PublicationYear,
                    Description = _book.Description,
                    Barcode = _book.Barcode,
                    Cost = _book.Cost,
                    ImageUrl = _book.ImageUrl,
                });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, Position = DialogPosition.TopCenter };
        var dialog = dialogService.Show<AddEditBookModal>(id == 0 ? "Add" : "Update", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            OnSearch("");
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        mudTable.ReloadServerData();
    }
}