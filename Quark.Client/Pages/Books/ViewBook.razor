@page "/books/{Id:int}"
@attribute [Authorize(Policy = Permissions.Books.View)]
@inject IBookHttpClient _bookHttpClient
@if (!_loaded)
{
    <MudProgressLinear Class="d-flex justify-center" Indeterminate Color="Color.Secondary" />
}
else
{
    if (Book is not null)
    {
        <MudCard>
            <MudCardHeader>
                @*<CardHeaderAvatar>
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Navigation.NavigateBack" />
                </CardHeaderAvatar>*@
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Book.Name</MudText>
                    <MudText Typo="Typo.body1">@Book.Author, @Book.Publisher, @Book.PublicationYear</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    @if (_canEdit)
                    {
                        <MudTooltip Text="Edit">
                            <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Edit" OnClick="InvokeModal" />
                        </MudTooltip>
                    }
                    @if (_canDelete)
                    {
                        <MudTooltip Text="Delete">
                            <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" OnClick="Delete" />
                        </MudTooltip>
                    }
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @switch (Book.Condition)
                {
                    case AssetStatusConstants.GoodCondition:
                        <MudAlert Severity="Severity.Success">@AssetStatusConstants.GoodCondition</MudAlert>
                        break;
                    case AssetStatusConstants.Lost:
                        <MudAlert Severity="Severity.Error">@AssetStatusConstants.Lost</MudAlert>
                        break;
                    case AssetStatusConstants.Unknown:
                        <MudAlert Severity="Severity.Info">@AssetStatusConstants.Unknown</MudAlert>
                        break;
                    case AssetStatusConstants.Destroyed:
                        <MudAlert Severity="Severity.Warning">@AssetStatusConstants.Destroyed</MudAlert>
                        break;
                    default:
                        <MudAlert Severity="Severity.Success">@AssetStatusConstants.GoodCondition</MudAlert>
                        break;
                }
                <MudGrid>
                    <MudItem xs="12" Class="d-flex justify-end mt-6 pa-4">
                        <MudMenu Label="Change Book Condition" Color="Color.Default" Variant="Variant.Filled" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" Dense OffsetY>
                            <MudMenuItem OnClick="(() => SaveConditionOnChange(AssetStatusConstants.GoodCondition))">Good Condition</MudMenuItem>
                            <MudMenuItem OnClick="(() => SaveConditionOnChange(AssetStatusConstants.Unknown))">Unknown</MudMenuItem>
                            <MudMenuItem OnClick="(() => SaveConditionOnChange(AssetStatusConstants.Lost))">Lost</MudMenuItem>
                            <MudMenuItem OnClick="(() => SaveConditionOnChange(AssetStatusConstants.Destroyed))">Destroyed</MudMenuItem>
                        </MudMenu>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="3" lg="2">
                        <MudPaper Class="pa-4" Outlined>
                            <MudText Typo="Typo.button">Barcode</MudText>
                            <MudText Typo="Typo.body2">@Book.Barcode</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2">
                        <MudPaper Class="pa-4" Outlined>
                            <MudText Typo="Typo.button">ISBN</MudText>
                            <MudText Typo="Typo.body2">@Book.ISBN</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2">
                        <MudPaper Class="pa-4" Outlined>
                            <MudText Typo="Typo.button">Dewey Index</MudText>
                            <MudText Typo="Typo.body2">@Book.DeweyIndex</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2">
                        <MudPaper Class="pa-4" Outlined>
                            <MudText Typo="Typo.button">Author</MudText>
                            <MudText Typo="Typo.body2">@Book.Author</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2">
                        <MudPaper Class="pa-4" Outlined>
                            <MudText Typo="Typo.button">Publisher</MudText>
                            <MudText Typo="Typo.body2">@Book.Publisher</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2">
                        <MudPaper Class="pa-4" Outlined>
                            <MudText Typo="Typo.button">Publication year</MudText>
                            <MudText Typo="Typo.body2">@Book.PublicationYear</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2">
                        <MudPaper Class="pa-4" Outlined>
                            <MudText Typo="Typo.button">Cost</MudText>
                            <MudText Typo="Typo.body2">@Book.Cost</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
                <MudPaper Class="d-flex flex-column pa-4 mt-6" Outlined>
                    <MudText Typo="Typo.button">Description</MudText>
                    <MudText Typo="Typo.body2">@Book.Description</MudText>
                </MudPaper>
            </MudCardContent>
        </MudCard>
    }
}

@code
{
    [Parameter]
    public int Id { get; set; }
    private BookResponse Book;
    private string Condition;

    private ClaimsPrincipal _currentUser;
    private bool _loaded = false;
    private bool _canEdit;
    private bool _canDelete;

    private async Task SaveConditionOnChange(string condition)
    {
        var response = await _bookHttpClient.UpdateConditionAsync(new(Book.Barcode, condition));
        if(response.Succeeded)
        {
            Condition = response.Data;
            StateHasChanged();
            snackbar.Add(response.Messages.FirstOrDefault(), Severity.Success);
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _currentUser = await authenticationManager.CurrentUser();
        _canEdit = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Books.Edit)).Succeeded;
        _canDelete = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Books.Delete)).Succeeded;
        var response = await _bookHttpClient.GetByIdAsync(Id);
        if(response.Succeeded)
        {
            Book= response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
        }
        _loaded = true;
    }

    private async Task InvokeModal()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(AddEditBookModal.Model), new AddEditBookCommand
        {
            Id = Book.Id,
            Name = Book.Name,
            ISBN = Book.ISBN,
            Author = Book.Author,
            DeweyIndex = Book.DeweyIndex,
            Publisher = Book.Publisher,
            Edition = Book.Edition,
            PublicationYear = Book.PublicationYear,
            Description = Book.Description,
            Barcode = Book.Barcode,
            Cost = Book.Cost,
            ImageUrl = Book.ImageUrl,
        });
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, Position = DialogPosition.TopCenter };
        var dialog = dialogService.Show<AddEditBookModal>("Edit", parameters, options);
        var result = await dialog.Result;
    }


    private async Task Delete()
    {
        if ((await dialogService.ShowMessageBox("Confirm Delete?", "Are you sure want to delete this book?", yesText: "Delete", cancelText: "Cancel")) == true)
        {
            var response = await _bookHttpClient.DeleteAsync(Id);
            if (response.Succeeded)
            {
                foreach (var message in response.Messages)
                {
                    snackbar.Add(message, Severity.Success);
                }
                StateHasChanged();
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    snackbar.Add(message, Severity.Error);
                }
            }
        }
    }

}