@namespace Quark.Client.Pages.Modals
@inject IDesignationHttpClient _designationHttpClient

<EditForm Model="Model" OnValidSubmit="SaveAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <MudDialog>
        <TitleContent>
            @if (Model.Id == 0)
            {
                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />Add Designation</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Update" Class="mr-3 mb-n1" />Update Designation</MudText>
            }
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="(() => Model.Name)" @bind-Value="Model.Name" Label="Designation Name" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton DisableElevation Variant="Variant.Filled" OnClick="(() => MudDialog.Close())">Cancel</MudButton>
            <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Success">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code
{
    [Parameter] public AddEditDesignationCommand Model { get; set; } = new();
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });

    private async Task SaveAsync()
    {
        var response = await _designationHttpClient.SaveAsync(Model);
        if (response.Succeeded)
        {
            snackbar.Add(response.Messages[0], Severity.Success);
            MudDialog.Close();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
        }
    }
}