@page "/account/forgot-password"
@inject IUserHttpClient userHttpClient
@inject NavigationManager navigationManager

@attribute [AllowAnonymous]

<PageTitle>Forgot Password | @ApplicationConstants.LibraryName</PageTitle>

<EditForm Model="requestModel" OnValidSubmit="SubmitAsync">
    <FluentValidationValidator @ref=_fluentValidationValidator />
    <div class="d-flex justify-center">
        <MudText Typo="Typo.h5">Forgot Password</MudText>
    </div>
    <MudDivider Class="my-4" />
    <div class="d-flex justify-center">
        <MudText Typo="Typo.body1">A Password reset link will be sent to your email address</MudText>
    </div>
    <MudGrid Class="mt-4">
        <DataAnnotationsValidator />
        <MudItem xs="12">
            <MudTextField Margin=Margin.Dense Label="Email Address" Variant="Variant.Outlined" @bind-Value="requestModel.Email" For="(() => requestModel.Email)" />
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Style="width: 100%;">Sign In</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code
{
    private ForgotPasswordRequest requestModel = new();

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => options.IncludeAllRuleSets());

    private async Task SubmitAsync()
    {
        var response = await userHttpClient.ForgotPasswordAsync(requestModel);
        if(response.Succeeded)
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Success);
            }
            navigationManager.NavigateTo("/");
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
            requestModel.Email = "";
        }
    }
}