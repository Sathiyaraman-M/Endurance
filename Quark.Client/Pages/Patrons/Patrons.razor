@page "/patrons"
@attribute [Authorize(Policy = Permissions.Patrons.View)]
@inject IPatronHttpClient _patronHttpClient

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Patrons</MudText>
<MudText Color="Color.Surface" Class="mb-4">Manage all patrons here</MudText>
@if (!_loaded)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
else
{
<MudTable Elevation="0" Outlined Hover HorizontalScrollbar Dense ServerData="new Func<TableState, Task<TableData<PatronResponse>>>(OnServerReloadAsync)" @ref="mudTable" LoadingProgressColor="Color.Secondary">
    <NoRecordsContent>
        <MudAlert Severity="Severity.Normal">No patrons enrolled in the library. Try to fill 'em up!</MudAlert>
    </NoRecordsContent>
    <LoadingContent>
        <MudText Typo="Typo.body1" Align="Align.Center" GutterBottom="true">Loading...</MudText>
    </LoadingContent>
    <ColGroup>
        <col/>
        <col/>
        <col/>
        <col/>
        <col/>
        <col style="width: 10%"/>
        <col style="width: 10%"/>
        <col style="width: 10%"/>
    </ColGroup>
    <ToolBarContent>
        <div class="justify-center mud-text-align-center">
            @if (_canCreate)
                {
                <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Class="me-2">Add</MudButton>
                }
            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => OnSearch(""))" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Class="me-2">Reload</MudButton>
        </div>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search for Books" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="PatronResponse" SortLabel="RegisterId">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="PatronResponse" SortLabel="Name">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="PatronResponse" SortLabel="Email">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="PatronResponse" SortLabel="Mobile">Mobile</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="PatronResponse" SortLabel="CurrentFees">Current fees</MudTableSortLabel></MudTh>
        @if (_canView)
            {
            <MudTh Style="text-align:right">View</MudTh>
            }
        @if (_canEdit)
            {
            <MudTh Style="text-align:right">Edit</MudTh>
            }
        @if (_canDelete)
            {
            <MudTh Style="text-align:right">Delete</MudTh>
            }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">
            <MudHighlighter Text="@context.RegisterId" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Name">
            <MudHighlighter Text="@context.Name" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Email">
            <MudHighlighter Text="@context.Email" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Mobile">
            <MudHighlighter Text="@context.Mobile" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Current Fees">
            <MudHighlighter Text="@context.CurrentFees.ToString()" HighlightedText="@_searchString" />
        </MudTd>
        @if (_canView)
            {
            <MudTd DataLabel="View" Style="text-align:right">
                <MudFab DisableElevation Color="Color.Secondary" Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" OnClick="@(() => navigationManager.NavigateTo($"patrons/{context.Id}"))" />
            </MudTd>
            }
        @if (_canEdit)
            {
            <MudTd DataLabel="Edit" Style="text-align:right">
                <MudFab DisableElevation Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="(() => InvokeModal(context.Id))" />
            </MudTd>
            }
        @if (_canDelete)
            {
            <MudTd DataLabel="View" Style="text-align:right">
                <MudFab DisableElevation Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="(() => Delete(context.Id))" />
            </MudTd>
            }
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
}
@code
{
    private List<PatronResponse> _patrons { get; set; }
    private PatronResponse _patron { get; set; }
    private string _searchString { get; set; }
    private MudTable<PatronResponse> mudTable { get; set; }
    private int _totalItems;
    private int _currentPage;

    private ClaimsPrincipal _currentUser;
    private bool _loaded;
    private bool _canView;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await authenticationManager.CurrentUser();
        _canView = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Patrons.View)).Succeeded;
        _canCreate = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Patrons.Create)).Succeeded;
        _canEdit = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Patrons.Edit)).Succeeded;
        _canDelete = (await authorizationService.AuthorizeAsync(_currentUser, Permissions.Patrons.Delete)).Succeeded;
        _loaded = true;
    }

    private async Task<TableData<PatronResponse>> OnServerReloadAsync(TableState tableState)
    {
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            tableState.Page = 0;
        }
        await LoadDataAsync(tableState.Page, tableState.PageSize, tableState);
        return new TableData<PatronResponse> { TotalItems = _totalItems, Items = _patrons };
    }

    private async Task LoadDataAsync(int page, int pageSize, TableState tableState)
    {
        string[] orderings = null;
        if (!string.IsNullOrEmpty(tableState.SortLabel))
        {
            orderings = tableState.SortDirection != SortDirection.None ? new[] { $"{tableState.SortLabel} {tableState.SortDirection}" } : new[] { $"{tableState.SortLabel}" };
        }
        var response = await _patronHttpClient.GetAllPaginatedAsync(new Core.Requests.PagedRequest
        {
            PageNumber = page + 1,
            PageSize = pageSize,
            SearchString = _searchString,
            OrderBy = orderings
        });
        if (response.Succeeded)
        {
            _totalItems = response.TotalCount;
            _currentPage = response.CurrentPage;
            _patrons = response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                snackbar.Add(message, Severity.Error);
            }
        }
    }

    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            _patron = _patrons.FirstOrDefault(c => c.Id == id);
            if (_patron != null)
            {
                parameters.Add(nameof(AddEditPatronModal.Model), new AddEditPatronCommand
                {
                    Id = _patron.Id,
                    RegisterId = _patron.RegisterId,
                    FirstName = _patron.FirstName,
                    LastName = _patron.LastName,
                    Address = _patron.Address,
                    DateOfBirth = _patron.DateOfBirth,
                    Email = _patron.Email,
                    Mobile = _patron.Mobile,
                    Issued = _patron.Issued,
                    MultipleCheckoutLimit = _patron.MultipleCheckoutLimit
                });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, Position = DialogPosition.TopCenter };
        var dialog = dialogService.Show<AddEditPatronModal>(id == 0 ? "Add" : "Update", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            OnSearch("");
        }   
    }

    private async Task Delete(int Id)
    {
        if ((await dialogService.ShowMessageBox("Confirm Delete?", "Are you sure want to delete this patron?", yesText: "Delete", cancelText: "Cancel")) == true)
        {
            var response = await _patronHttpClient.DeleteAsync(Id);
            OnSearch("");
            foreach (var message in response.Messages)
            {
                if (response.Succeeded)
                {
                    snackbar.Add(message, Severity.Success);
                }
                else
                {
                    snackbar.Add(message, Severity.Error);
                }
            }
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        mudTable.ReloadServerData();
    }
}